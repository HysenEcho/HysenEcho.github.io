<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hysen</title>
  
  <subtitle>一个想摆烂的ICer</subtitle>
  <link href="http://hysenecho.github.io/atom.xml" rel="self"/>
  
  <link href="http://hysenecho.github.io/"/>
  <updated>2023-08-29T23:04:14.738Z</updated>
  <id>http://hysenecho.github.io/</id>
  
  <author>
    <name>Hysen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深度学习</title>
    <link href="http://hysenecho.github.io/2023/08/27/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    <id>http://hysenecho.github.io/2023/08/27/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-08-27T12:35:09.000Z</published>
    <updated>2023-08-29T23:04:14.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h1><p>记录一下深度学习的学习记录</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;深度学习&quot;&gt;&lt;a href=&quot;#深度学习&quot; class=&quot;headerlink&quot; title=&quot;深度学习&quot;&gt;&lt;/a&gt;深度学习&lt;/h1&gt;&lt;p&gt;记录一下深度学习的学习记录&lt;/p&gt;
</summary>
      
    
    
    
    <category term="AI" scheme="http://hysenecho.github.io/categories/AI/"/>
    
    <category term="学习笔记" scheme="http://hysenecho.github.io/categories/AI/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="AI" scheme="http://hysenecho.github.io/tags/AI/"/>
    
    <category term="深度学习" scheme="http://hysenecho.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Pytorch" scheme="http://hysenecho.github.io/tags/Pytorch/"/>
    
  </entry>
  
  <entry>
    <title>网页源码管理与GitHubActions自动部署</title>
    <link href="http://hysenecho.github.io/2023/08/27/%E7%BD%91%E9%A1%B5%E6%BA%90%E7%A0%81%E7%AE%A1%E7%90%86/"/>
    <id>http://hysenecho.github.io/2023/08/27/%E7%BD%91%E9%A1%B5%E6%BA%90%E7%A0%81%E7%AE%A1%E7%90%86/</id>
    <published>2023-08-26T18:43:39.000Z</published>
    <updated>2023-08-30T00:22:11.241Z</updated>
    
    <content type="html"><![CDATA[<p>因为自己老是手贱，不知道就把哪里改了，然后就会出一些莫名奇妙的问题，甚至可以折腾好几天，所以特别需要用git进行源码管理。奈何自己对于git理解不到位，使用起来很吃力，在借鉴了几位大佬的文章后，才渐渐上手，在此记录一下操作，遇到的bug，以及解决办法。</p><p>参考文章：</p><p>1.<a href="https://akilar.top/posts/f752c86d/">使用Github Action实现全自动部署</a></p><p>2.<a href="https://blog.ccknbc.cc/posts/hexo-toss/">hexo博客搭建–源码管理</a></p><h1 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h1><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>私有仓库Hexoblog：源码</p><p>公开仓库HysenEcho.github.io：静态网页</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="上传源码"><a href="#上传源码" class="headerlink" title="上传源码"></a>上传源码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 与远程 Git 仓库建立连接，只此一次即可  </span></span><br><span class="line">git remote add origin https://github.com/你的用户名/你的名字.github.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加到缓存区  </span></span><br><span class="line">git add -A  </span><br><span class="line">git commit -m <span class="string">&quot;这次做了什么更改，简单描述下即可&quot;</span>  </span><br><span class="line"><span class="comment"># 推送至远程仓库  </span></span><br><span class="line">git push  </span><br><span class="line"><span class="comment"># 第一次提交，你可能需设置一下默认提交分支  </span></span><br><span class="line"><span class="comment"># git push --set-upstream origin hexo</span></span><br></pre></td></tr></table></figure><h4 id="问题：themes文件夹被当做子模块上传，未成功"><a href="#问题：themes文件夹被当做子模块上传，未成功" class="headerlink" title="问题：themes文件夹被当做子模块上传，未成功"></a>问题：themes文件夹被当做子模块上传，未成功</h4><p>这里同样涉及到后面的自动部署，是否能读取主题，此处要把<code>themes</code>文件夹<code>.git</code>移除，见下方&#x3D;&#x3D;问题1&#x3D;&#x3D;</p><h5 id="先删除子模块"><a href="#先删除子模块" class="headerlink" title="先删除子模块"></a>先删除子模块</h5><p>参考链接：<a href="https://blog.csdn.net/as4589sd/article/details/106501511">删除子模块</a></p><p>首先把该子模块备份，然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -r --cached themes</span><br><span class="line">git commit -a -m <span class="string">&#x27;remove themes submodule&#x27;</span></span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure><h5 id="重新加入"><a href="#重新加入" class="headerlink" title="重新加入"></a>重新加入</h5><p>1、进入到子模块的目录，删除原来的git地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">rm</span> origin</span><br></pre></td></tr></table></figure><p>2、重新回到主目录，进行add <a href="https://so.csdn.net/so/search?q=commit&spm=1001.2101.3001.7020">commit</a> push</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">git add themes/</span><br><span class="line">git commit -m <span class="string">&quot;add AAAAA_business again&quot;</span></span><br><span class="line">git remote add origin git@github.com:HysenEcho/Hexoblog.git</span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure><h3 id="新建脚本"><a href="#新建脚本" class="headerlink" title="新建脚本"></a>新建脚本</h3><p>每次推送都要输入这三条命令，你可能觉得有些麻烦。那么你可以编写 bash 脚本。</p><p>譬如，在根目录下新建 <code>update.sh</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果没有消息后缀，默认提交信息为 `:Hysen: update content`</span></span><br><span class="line">info=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">if</span> [<span class="string">&quot;<span class="variable">$info</span>&quot;</span> = <span class="string">&quot;&quot;</span>];</span><br><span class="line"><span class="keyword">then</span> info=<span class="string">&quot;:Hysen: update content&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">&quot;<span class="variable">$info</span>&quot;</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>此后更新的话，只需要在终端执行 <code>sh update.sh</code> 即可。</p><h2 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h2><h3 id="问题1：git-add报错"><a href="#问题1：git-add报错" class="headerlink" title="问题1：git add报错"></a>问题1：git add报错</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">warning: adding embedded git repository: themes/hexo-theme-huhu</span><br><span class="line">hint: You<span class="string">&#x27;ve added another git repository inside your current repository.</span></span><br><span class="line"><span class="string">hint: Clones of the outer repository will not contain the contents of</span></span><br><span class="line"><span class="string">hint: the embedded repository and will not know how to obtain it.</span></span><br><span class="line"><span class="string">hint: If you meant to add a submodule, use:</span></span><br><span class="line"><span class="string">hint: </span></span><br><span class="line"><span class="string">hint:   git submodule add &lt;url&gt; themes/hexo-theme-huhu</span></span><br><span class="line"><span class="string">hint: </span></span><br><span class="line"><span class="string">hint: If you added this path by mistake, you can remove it from the</span></span><br><span class="line"><span class="string">hint: index with:</span></span><br><span class="line"><span class="string">hint: </span></span><br><span class="line"><span class="string">hint:   git rm --cached themes/hexo-theme-huhu</span></span><br><span class="line"><span class="string">hint: </span></span><br><span class="line"><span class="string">hint: See &quot;git help submodule&quot; for more information.</span></span><br></pre></td></tr></table></figure><p>因为在父仓库内部克隆一个仓库 &#x2F;themes&#x2F;anzhiyu (从另一个 rope 克隆过来的)，会添加为子模块，但是不知道这个模块仓库所在的 url ，因此在 GitHub 上无法打开这个文件夹</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>参考：1.<a href="https://akilar.top/posts/f752c86d/">使用Github Action实现全自动部署–源码管理部分</a></p><p>删除或者先把<code>[Blogroot]/themes/butterfly/.git</code>移动到非博客文件夹目录下,原因是主题文件夹下的<code>.git</code>文件夹的存在会导致其被识别成子项目，从而无法被上传到源码仓库</p><h3 id="问题2-git-push报错"><a href="#问题2-git-push报错" class="headerlink" title="问题2 git push报错"></a>问题2 git push报错</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push --set-upstream origin hexo</span><br><span class="line">error: src refspec hexo does not match any</span><br><span class="line">error: failed to push some refs to <span class="string">&#x27;https://github.com/HysenEcho/HysenEcho.github.io&#x27;</span></span><br></pre></td></tr></table></figure><p>后来重新输入,改为master，还是报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git push --set-upstream origin master</span><br><span class="line">fatal: unable to access <span class="string">&#x27;https://github.com/HysenEcho/HysenEcho.github.io/&#x27;</span>: Recv failure: Connection was reset</span><br></pre></td></tr></table></figure><h4 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h4><p>参考文章：<a href="https://www.cnblogs.com/nuomibaibai/p/17040228.html">解决Recv failure: Connection was reset</a></p><p>1、在git中执行git config –global –unset http.proxy和git config –global –unset https.proxy</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure><p>2、在cmd下执行ipconfig&#x2F;flushdns 清理DNS缓存</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ipconfig</span>/flushdns</span><br></pre></td></tr></table></figure><p>3、重新push</p><h1 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h1><p>参考文章：</p><p>1.<a href="https://www.imql.life/2020/01/24/My_HexoBlog_with_NexT_3/">https://www.imql.life/2020/01/24/My_HexoBlog_with_NexT_3/</a></p><p>2.<a href="https://blog.ccknbc.cc/posts/hexo-toss/">https://blog.ccknbc.cc/posts/hexo-toss/</a></p><p>利用gitaction自动部署</p><h2 id="新建工作流文件"><a href="#新建工作流文件" class="headerlink" title="新建工作流文件"></a>新建工作流文件</h2><p>前往博客构建仓库，创建一个工作流文件（一个 yml 文件）：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">hexo-build</span></span><br><span class="line"><span class="comment"># 仓库main分支有推送时执行jobs下定义的任务</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"><span class="comment"># 设置时区为上海</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># 定义名为blog-build的任务</span></span><br><span class="line">  <span class="attr">blog-build:</span></span><br><span class="line">    <span class="comment"># 定义运行的操作系统</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="comment"># 定义步骤</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># 签出仓库的默认分支，此处即为main，同时迁出子项目，此处即为主题仓库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">submodules:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 安装v12.14.0的Node.js，同时进行全局缓存</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Node.js</span> <span class="string">v18.17.0</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;18.17.0&quot;</span></span><br><span class="line">          <span class="attr">cache:</span> <span class="string">&quot;npm&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          export TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="string">          npm install hexo-cli -g</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="comment"># 缓存文件夹node_modules并生成唯一码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v3</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">cache-dependencies</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;**/package-lock.json&#x27;)&#125;&#125;</span></span><br><span class="line">      <span class="comment"># 如果唯一码为比对成功，重新安装依赖</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">steps.cache-dependencies.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">--save</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          hexo clean</span></span><br><span class="line"><span class="string">          npm i &amp;&amp; npx hexo g</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">private</span> <span class="string">rsa</span> <span class="string">key</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">DEPLOY_KEY:</span> <span class="string">$&#123;&#123;secrets.DEPLOYKEY&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">          echo &quot;$DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa </span></span><br><span class="line"><span class="string">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string"></span>        <span class="comment"># ssh-keyscan gitee.com &gt;&gt; ~/.ssh/known_hosts </span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git config --global user.name &quot;$&#123;&#123;secrets.GITHUBUSERNAME&#125;&#125;&quot;</span></span><br><span class="line"><span class="string">          git config --global user.email &quot;$&#123;&#123;secrets.GITHUBEMAIL&#125;&#125;&quot;</span></span><br><span class="line"><span class="string">          npm run build &amp;&amp; npm run deploy</span></span><br></pre></td></tr></table></figure><h2 id="添加secrets"><a href="#添加secrets" class="headerlink" title="添加secrets"></a>添加secrets</h2><ul><li><p>指定 DEPLOYKEY 的值，此值为我们电脑用户文件夹下 .ssh 下 id_rsa 的内容，即私钥，该私钥在<a href="https://www.imql.life/2020/01/24/What_is_Git/#%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE_Git">安装和配置 Git</a> 时生成。</p></li><li><p>指定GITHUBUSERNAME的值，即自己的 GitHub 用户名。</p></li><li><p>指定 GITHUBEMAIL的值，即自己的 GitHub 邮箱。</p><p>当每次更新时，直接执行脚本即可自动部署。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;因为自己老是手贱，不知道就把哪里改了，然后就会出一些莫名奇妙的问题，甚至可以折腾好几天，所以特别需要用git进行源码管理。奈何自己对于git理解不到位，使用起来很吃力，在借鉴了几位大佬的文章后，才渐渐上手，在此记录一下操作，遇到的bug，以及解决办法。&lt;/p&gt;
&lt;p&gt;参考文</summary>
      
    
    
    
    <category term="博客" scheme="http://hysenecho.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Hexo" scheme="http://hysenecho.github.io/categories/%E5%8D%9A%E5%AE%A2/Hexo/"/>
    
    
    <category term="博客写作" scheme="http://hysenecho.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C/"/>
    
    <category term="git" scheme="http://hysenecho.github.io/tags/git/"/>
    
    <category term="使用记录" scheme="http://hysenecho.github.io/tags/%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>markdown在网页的使用</title>
    <link href="http://hysenecho.github.io/2023/08/26/markdown%E5%9C%A8%E7%BD%91%E9%A1%B5%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://hysenecho.github.io/2023/08/26/markdown%E5%9C%A8%E7%BD%91%E9%A1%B5%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2023-08-26T11:35:09.000Z</published>
    <updated>2023-08-29T23:03:39.286Z</updated>
    
    <content type="html"><![CDATA[<p>经常在Obsidian中使用markdown，具备比较丰富的快捷键和插件可供使用。</p><p>在Hexo网页中有所不同，记录一下<br>参考链接：<a href="https://febers.github.io/Markdown-%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/">markdown语法</a></p><h1 id="callout"><a href="#callout" class="headerlink" title="callout"></a>callout</h1><p>使用前端框架 Bootstrap Callout 的语法，Hexo 提供了对其的支持，Content 可以搭配 Markdown 语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123; % note class_name % &#125; Content (md partial supported) &#123; % endnote % &#125;</span><br><span class="line"></span><br><span class="line">&#123; % note default % &#125; This is a default note &#123; % endnote % &#125;</span><br><span class="line"></span><br><span class="line">&#123; % note primary % &#125; This is a  primary note &#123; % endnote % &#125;</span><br><span class="line"></span><br><span class="line">&#123; % note success % &#125; This is a success note &#123; % endnote % &#125;</span><br><span class="line"></span><br><span class="line">&#123; % note info % &#125; This is a info note &#123; % endnote % &#125;</span><br><span class="line"></span><br><span class="line">&#123; % note warning % &#125; This is a warning note &#123; % endnote % &#125;</span><br><span class="line"></span><br><span class="line">&#123; % note danger % &#125; This is a danger note &#123; % endnote % &#125;</span><br></pre></td></tr></table></figure><p>实现类似笔记的引用效果，其中<code>class_name</code>可以为</p><ul><li><code>default</code></li><li><code>primary</code></li><li><code>success</code></li><li><code>info</code></li><li><code>warning</code></li><li><code>danger</code></li></ul><p>例如：<br>{ % note danger % } This is a danger note { % endnote % }</p><h1 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h1><p>GFM 语法支持添加 emoji 表情，输入不同的符号码（两个冒号包围的字符）可以显示出不同的表情。</p><p>比如:stuck_out_tongue_winking_eye:：😜<br>:grinning_face:<br>😍<br>可以在此找到不同表情对应的符号码：<a href="https://www.webfx.com/tools/emoji-cheat-sheet/">Emoji cheat sheet for GitHub, Basecamp, Slack &amp; more</a></p><p>Hexo 默认不支持 emoji 表情，可以通过安装 hexo-filter-github-emojis 插件实现</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;经常在Obsidian中使用markdown，具备比较丰富的快捷键和插件可供使用。&lt;/p&gt;
&lt;p&gt;在Hexo网页中有所不同，记录一下&lt;br&gt;参考链接：&lt;a href=&quot;https://febers.github.io/Markdown-%E8%AF%AD%E6%B3%95%</summary>
      
    
    
    
    <category term="博客" scheme="http://hysenecho.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Hexo" scheme="http://hysenecho.github.io/categories/%E5%8D%9A%E5%AE%A2/Hexo/"/>
    
    
    <category term="博客写作" scheme="http://hysenecho.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>博客写作</title>
    <link href="http://hysenecho.github.io/2023/08/26/%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C/"/>
    <id>http://hysenecho.github.io/2023/08/26/%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C/</id>
    <published>2023-08-26T08:43:39.000Z</published>
    <updated>2023-08-29T23:03:46.119Z</updated>
    
    <content type="html"><![CDATA[<p>博客的写作主要利用markdown编辑器完成</p><h1 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new post title</span><br><span class="line"><span class="comment">#post为模板，可以自己更改，即以post为模板创建名为title的文章</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;博客的写作主要利用markdown编辑器完成&lt;/p&gt;
&lt;h1 id=&quot;创建文章&quot;&gt;&lt;a href=&quot;#创建文章&quot; class=&quot;headerlink&quot; title=&quot;创建文章&quot;&gt;&lt;/a&gt;创建文章&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;tab</summary>
      
    
    
    
    <category term="博客" scheme="http://hysenecho.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客写作" scheme="http://hysenecho.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>搭建第一个博客</title>
    <link href="http://hysenecho.github.io/2023/08/26/%E6%90%AD%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://hysenecho.github.io/2023/08/26/%E6%90%AD%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</id>
    <published>2023-08-26T05:35:09.000Z</published>
    <updated>2023-08-29T23:03:44.138Z</updated>
    
    <content type="html"><![CDATA[<p>看着别人的博客很炫酷，所以也想自己尝试着搭建一个简单的博客，记录一下。</p><h1 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h1><p>首先是购买域名，在华为云购买<code>hysen.top</code>，因为与我的小名谐音。</p><h1 id="寻找搭建网站教程"><a href="#寻找搭建网站教程" class="headerlink" title="寻找搭建网站教程"></a>寻找搭建网站教程</h1><p>因为我是一个纯小白，寻找一个无需前端代码的网站搭建方式尤为重要。</p><h2 id="方法一-用vercel部署"><a href="#方法一-用vercel部署" class="headerlink" title="方法一 用vercel部署"></a>方法一 用vercel部署</h2><p>在B站突然推荐了一个视频<br><a href="https://www.bilibili.com/video/BV1ia411d7q4?vd_source=13a606ca4db0b44a3244a6036f52c6dc">在线免费搭建hexo博客</a><br>尝试了一下，确实挺简单</p><h2 id="方法二-用GitHubpages"><a href="#方法二-用GitHubpages" class="headerlink" title="方法二 用GitHubpages"></a>方法二 用GitHubpages</h2><p>经过一位大佬的推荐<code>@海阔蓝</code>，推荐了从头到尾的教程<br><a href="https://akilar.top/posts/6ef63e2d/">Hexo+github搭建个人博客</a></p><h1 id="关键步骤"><a href="#关键步骤" class="headerlink" title="关键步骤"></a>关键步骤</h1><h2 id="华为云解析"><a href="#华为云解析" class="headerlink" title="华为云解析"></a>华为云解析</h2><p>域名无法直接使用，需要在华为云控制台-&gt;域名-&gt;云解析<br>在vercel点击add，将值填入云解析，即可通过域名成功访问</p><p>{ % note info % } 在使用方式二时，需要解析为<code>CNAM</code>类型，在配置dns时，即需要重定向至hysenecho.github.io { % endnote % }</p><h2 id="GitHubpages无法访问"><a href="#GitHubpages无法访问" class="headerlink" title="GitHubpages无法访问"></a>GitHubpages无法访问</h2><p>如果访问时显示404，是因为仓库为私密，需要公开。</p><p>更改之后重新部署即可</p><h2 id="源码与静态网页分离"><a href="#源码与静态网页分离" class="headerlink" title="源码与静态网页分离"></a>源码与静态网页分离</h2><p>可以发现，本地的源码是markdown文件，而GitHub仓库中是HTML文件，保证了源码不公开</p><p>{ % note warning % } 在看了大佬的教程，以为需要重新开一个私人库，然后用GitHubaction自动部署，折腾了半天，才发现最开始已经实现了分离。 { % endnote % }<br><a href="https://akilar.top/posts/f752c86d/">使用Github Action实现全自动部署</a></p><h2 id="git之后自动部署-利用脚本"><a href="#git之后自动部署-利用脚本" class="headerlink" title="git之后自动部署(利用脚本)"></a>git之后自动部署(利用脚本)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#git-pull用来从远程仓库拉取最新更改，适用于多PC或多系统端之间的版本对接</span></span><br><span class="line">git pull </span><br><span class="line"><span class="comment">#git-push（用于提交每次的修改到远程仓库</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;deploy from hexo-admin&quot;</span></span><br><span class="line">git push</span><br><span class="line"><span class="comment">#hexo-publish（清空本地缓存后重新部署博客页面）</span></span><br><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo depoly</span><br></pre></td></tr></table></figure><p>将.txt后缀更改为.sh后缀，就是一个可执行脚本了</p><h2 id="博客自动部署"><a href="#博客自动部署" class="headerlink" title="博客自动部署"></a>博客自动部署</h2><p>利用Hexo中的博客一键部署即可，不需要重新创建GitHubaction</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;看着别人的博客很炫酷，所以也想自己尝试着搭建一个简单的博客，记录一下。&lt;/p&gt;
&lt;h1 id=&quot;购买域名&quot;&gt;&lt;a href=&quot;#购买域名&quot; class=&quot;headerlink&quot; title=&quot;购买域名&quot;&gt;&lt;/a&gt;购买域名&lt;/h1&gt;&lt;p&gt;首先是购买域名，在华为云购买&lt;code</summary>
      
    
    
    
    <category term="博客" scheme="http://hysenecho.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Hexo" scheme="http://hysenecho.github.io/categories/%E5%8D%9A%E5%AE%A2/Hexo/"/>
    
    
    <category term="博客搭建" scheme="http://hysenecho.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
